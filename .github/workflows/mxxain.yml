name: macOS VNC Xxxxxx

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: macos-latest
    timeout-minutes: 3600

    steps:
      - name: Configure System Settings
        run: |
          # Disable screen saver and sleep first
          sudo pmset -a displaysleep 0 sleep 0 disksleep 0
          echo "‚úÖ System settings configured"

      - name: Create VNC User with Secure Password
        run: |
          # Generate secure password
          password=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
          
          # Create user account
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 80
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
          
          # Set password
          sudo dscl . -passwd /Users/vncuser "$password"
          
          # Add to admin group
          sudo dscl . -append /Groups/admin GroupMembership vncuser
          
          # Create home directory
          sudo createhomedir -c -u vncuser
          
          # Store credentials
          echo "VNC_CREDS=User: vncuser | Password: $password" >> $GITHUB_ENV
          echo "VNC_PASSWORD=$password" >> $GITHUB_ENV
          echo "VNC_USERNAME=vncuser" >> $GITHUB_ENV
          
          # Verify user creation
          if ! dscl . -read /Users/vncuser > /dev/null 2>&1; then
              echo "User creation failed"
              exit 1
          fi
          
          echo "‚úÖ VNC user 'vncuser' created with password: $password"

      - name: Install Tailscale
        run: |
          echo "Installing Tailscale..."
          
          # Install Homebrew if not present
          if ! command -v brew &> /dev/null; then
              echo "Installing Homebrew..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
              eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # Install Tailscale via Homebrew
          echo "Installing Tailscale via Homebrew..."
          brew install tailscale
          
          # Verify installation
          if command -v tailscale &> /dev/null; then
              echo "‚úÖ Tailscale CLI installed successfully"
              tailscale version
          else
              echo "‚ùå Tailscale installation failed"
              exit 1
          fi

      - name: Setup Tailscale Daemon and Connect
        run: |
          echo "Setting up Tailscale daemon..."
          
          # Create necessary directories
          sudo mkdir -p /var/run/tailscale
          sudo mkdir -p /var/lib/tailscale
          
          # Create socket directory with proper permissions
          sudo mkdir -p /var/run
          sudo chown root:wheel /var/run
          
          # Start tailscaled daemon with correct socket path
          echo "Starting Tailscale daemon..."
          sudo /opt/homebrew/bin/tailscaled \
            --state=/var/lib/tailscale/tailscaled.state \
            --socket=/var/run/tailscaled.socket \
            --port=0 &
          
          TAILSCALED_PID=$!
          echo "Tailscaled started with PID: $TAILSCALED_PID"
          
          # Wait for daemon to initialize and create socket
          echo "Waiting for Tailscale daemon to initialize..."
          retries=0
          while [[ ! -S /var/run/tailscaled.socket && $retries -lt 30 ]]; do
              echo "Waiting for socket creation... (attempt $((retries + 1)))"
              sleep 2
              ((retries++))
          done
          
          # Verify socket exists
          if [[ ! -S /var/run/tailscaled.socket ]]; then
              echo "‚ùå Socket not created after waiting"
              exit 1
          fi
          
          echo "‚úÖ Tailscale daemon running and socket created"
          
          # Connect to Tailscale network
          echo "Connecting to Tailscale network..."
          retries=0
          while [[ $retries -lt 3 ]]; do
              if sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-$GITHUB_RUN_ID --reset; then
                  echo "‚úÖ Successfully connected to Tailscale"
                  break
              else
                  echo "‚ö†Ô∏è  Connection attempt $((retries + 1)) failed, retrying..."
                  sleep 5
                  ((retries++))
              fi
          done
          
          if [[ $retries -eq 3 ]]; then
              echo "‚ùå Failed to connect after 3 attempts"
              exit 1
          fi

      - name: Get Tailscale IP
        run: |
          echo "Getting Tailscale IP address..."
          
          # Wait for IP assignment
          sleep 10
          
          # Get IP with retry logic
          retries=0
          tailscale_ip=""
          
          while [[ -z "$tailscale_ip" && $retries -lt 12 ]]; do
              echo "Attempt $((retries + 1)) to get Tailscale IP..."
              tailscale_ip=$(sudo tailscale ip -4 2>/dev/null | head -n1 | xargs)
              
              if [[ -n "$tailscale_ip" && "$tailscale_ip" != "100.64.0.1" ]]; then
                  break
              fi
              
              echo "IP not ready yet, waiting..."
              sleep 10
              ((retries++))
          done
          
          if [[ -z "$tailscale_ip" || "$tailscale_ip" == "100.64.0.1" ]]; then
              echo "‚ùå Failed to get valid Tailscale IP after multiple attempts"
              echo "Current status:"
              sudo tailscale status
              echo "Network interfaces:"
              ifconfig | grep -A 1 tailscale
              exit 1
          fi
          
          echo "TAILSCALE_IP=$tailscale_ip" >> $GITHUB_ENV
          echo "‚úÖ Tailscale IP assigned: $tailscale_ip"

      - name: Enable Screen Sharing (Simple Method)
        run: |
          echo "Enabling macOS Screen Sharing - Simple Method..."
          
          # Enable Screen Sharing service using the simplest method
          echo "Starting Screen Sharing service..."
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          
          # Wait for service to start
          sleep 10
          
          # Verify service is running
          if netstat -an | grep -q "*.5900.*LISTEN"; then
              echo "‚úÖ Screen Sharing service started successfully on port 5900"
          else
              echo "‚ö†Ô∏è  Screen Sharing not started, trying alternative method..."
              
              # Alternative: Use kickstart method
              sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
                -activate -configure -access -on -users vncuser -privs -all -restart -agent
              
              sleep 10
              
              if netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "‚úÖ Screen Sharing started via kickstart method"
              else
                  echo "‚ùå Screen Sharing failed to start"
                  netstat -an | grep 59 || echo "No VNC ports found"
              fi
          fi

      - name: Create Simple HTML VNC Client
        run: |
          echo "Creating a simple HTML VNC client for web access..."
          
          # Create a simple HTML file that can connect to VNC
          mkdir -p /tmp/vnc-web
          cat > /tmp/vnc-web/vnc.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>VNC Connection</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f0f0f0; }
                  .container { background: white; padding: 30px; border-radius: 10px; max-width: 600px; margin: 0 auto; }
                  .info { background: #e8f4fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
                  .credentials { background: #f8f9fa; padding: 15px; border-radius: 5px; font-family: monospace; }
                  .button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; text-decoration: none; display: inline-block; }
                  .warning { background: #fff3cd; padding: 15px; border-radius: 5px; border-left: 4px solid #ffc107; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üñ•Ô∏è macOS VNC Connection</h1>
                  
                  <div class="info">
                      <h3>üì± For Android VNC Apps:</h3>
                      <div class="credentials">
                          <strong>Server:</strong> TAILSCALE_IP_PLACEHOLDER<br>
                          <strong>Port:</strong> 5900<br>
                          <strong>Username:</strong> vncuser<br>
                          <strong>Password:</strong> PASSWORD_PLACEHOLDER
                      </div>
                  </div>
                  
                  <div class="warning">
                      <h4>‚öôÔ∏è Android VNC Client Settings:</h4>
                      <ul>
                          <li><strong>Authentication:</strong> Username & Password (NOT VNC Password)</li>
                          <li><strong>Color Quality:</strong> Medium (16-bit)</li>
                          <li><strong>Recommended Apps:</strong> RealVNC Viewer, bVNC, MultiVNC</li>
                      </ul>
                  </div>
                  
                  <div class="info">
                      <h3>üîß Troubleshooting:</h3>
                      <ul>
                          <li>If "incompatible protocol": Try <strong>bVNC</strong> app (best compatibility)</li>
                          <li>If authentication fails: Select "Username/Password" not "VNC Password"</li>
                          <li>If slow: Reduce color quality to 8-bit</li>
                          <li>If connection refused: Check if you're on the same Tailscale network</li>
                      </ul>
                  </div>
                  
                  <div class="info">
                      <h3>üì± Recommended Android Apps:</h3>
                      <ol>
                          <li><strong>bVNC</strong> - Best macOS compatibility</li>
                          <li><strong>MultiVNC</strong> - Good performance</li>
                          <li><strong>RealVNC Viewer</strong> - Official app</li>
                          <li><strong>VNC Viewer (free)</strong> - Basic but works</li>
                      </ol>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          # Replace placeholders with actual values
          sed -i '' "s/TAILSCALE_IP_PLACEHOLDER/$TAILSCALE_IP/g" /tmp/vnc-web/vnc.html
          sed -i '' "s/PASSWORD_PLACEHOLDER/$VNC_PASSWORD/g" /tmp/vnc-web/vnc.html
          
          # Start a simple HTTP server for the web interface
          echo "Starting simple HTTP server for web interface..."
          cd /tmp/vnc-web
          python3 -m http.server 8080 --bind 0.0.0.0 &
          HTTP_SERVER_PID=$!
          
          echo "‚úÖ Simple HTTP server started on port 8080 (PID: $HTTP_SERVER_PID)"
          echo "‚úÖ Web interface available at: http://$TAILSCALE_IP:8080/vnc.html"

      - name: Verify VNC Server Accessibility
        run: |
          echo "Verifying VNC server accessibility..."
          echo "Tailscale IP: $TAILSCALE_IP"
          
          # Check if VNC port (5900) is listening
          if netstat -an | grep -q "*.5900.*LISTEN"; then
              echo "‚úÖ VNC port 5900 is listening"
              
              # Test basic VNC connectivity
              if nc -zv localhost 5900 2>/dev/null; then
                  echo "‚úÖ VNC server responding locally"
              else
                  echo "‚ö†Ô∏è  VNC server not responding locally"
              fi
          else
              echo "‚ùå VNC port 5900 is not listening"
              echo "Available ports:"
              netstat -an | grep LISTEN | head -10
          fi
          
          # Check if HTTP server is running
          if netstat -an | grep -q "*.8080.*LISTEN"; then
              echo "‚úÖ HTTP server is running on port 8080"
          else
              echo "‚ö†Ô∏è  HTTP server not running"
          fi

      - name: Install Additional Tools
        run: |
          echo "Installing additional development tools..."
          
          # Install useful development tools
          brew install --cask visual-studio-code
          brew install git node python3
          
          echo "‚úÖ Additional tools installed successfully"

      - name: Maintain Connection
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üñ•Ô∏è  macOS VNC ACCESS - ANDROID COMPATIBLE"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üåê Tailscale IP: $TAILSCALE_IP"
          echo "üîå VNC Port: 5900"
          echo "üë§ Username: $VNC_USERNAME"
          echo "üîë Password: $VNC_PASSWORD"
          echo "üåç Web Info: http://$TAILSCALE_IP:8080/vnc.html"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          
          echo "üì± ANDROID CONNECTION GUIDE:"
          echo ""
          echo "Step 1: Download a VNC app (recommended order):"
          echo "   ü•á bVNC - Best compatibility with macOS"
          echo "   ü•à MultiVNC - Good performance"
          echo "   ü•â RealVNC Viewer - Official app"
          echo "   4Ô∏è‚É£ VNC Viewer - Basic free app"
          echo ""
          
          echo "Step 2: Configure VNC app with these settings:"
          echo "   ‚Ä¢ Server/Host: $TAILSCALE_IP"
          echo "   ‚Ä¢ Port: 5900"
          echo "   ‚Ä¢ Authentication Type: Username & Password (NOT VNC Password!)"
          echo "   ‚Ä¢ Username: $VNC_USERNAME"
          echo "   ‚Ä¢ Password: $VNC_PASSWORD"
          echo "   ‚Ä¢ Color Quality: Medium (16-bit) - better performance"
          echo "   ‚Ä¢ Protocol Version: Auto or 3.8"
          echo ""
          
          echo "Step 3: Advanced Settings (if available):"
          echo "   ‚Ä¢ Disable: Clipboard sync, File transfer"
          echo "   ‚Ä¢ Enable: View-only mode first, then enable control"
          echo "   ‚Ä¢ Encoding: Auto, Tight, or Raw"
          echo ""
          
          echo "üåê ALTERNATIVE - Web Browser Method:"
          echo "   ‚Ä¢ Open any browser on your Android device"
          echo "   ‚Ä¢ Go to: http://$TAILSCALE_IP:8080/vnc.html"
          echo "   ‚Ä¢ Get connection details from the webpage"
          echo ""
          
          echo "üîß TROUBLESHOOTING:"
          echo "   ‚Ä¢ 'Incompatible protocol' ‚Üí Try bVNC app"
          echo "   ‚Ä¢ 'Authentication failed' ‚Üí Select 'Username/Password' NOT 'VNC Password'"
          echo "   ‚Ä¢ 'Connection refused' ‚Üí Check Tailscale connection"
          echo "   ‚Ä¢ 'Black/blank screen' ‚Üí Try 8-bit color depth"
          echo "   ‚Ä¢ 'Very slow' ‚Üí Disable clipboard and reduce color quality"
          echo ""
          
          echo "‚úÖ READY! Your macOS desktop is accessible via VNC!"
          echo "   Visit http://$TAILSCALE_IP:8080/vnc.html for detailed instructions"
          echo ""
          
          # Keep runner active with health checks
          while true; do
              current_time=$(date '+%Y-%m-%d %H:%M:%S')
              echo "[$current_time] üü¢ macOS VNC Server Active"
              
              # Health check: Verify Tailscale is still connected
              if ! sudo tailscale status | grep -q "logged in"; then
                  echo "‚ö†Ô∏è  Tailscale connection lost. Attempting to reconnect..."
                  sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} || echo "Reconnection failed"
              fi
              
              # Health check: Verify VNC service is still running
              if ! netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "‚ö†Ô∏è  VNC service down. Restarting..."
                  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
              fi
              
              # Health check: Verify HTTP server is still running
              if ! netstat -an | grep -q "*.8080.*LISTEN"; then
                  echo "‚ö†Ô∏è  HTTP server down. Restarting..."
                  cd /tmp/vnc-web
                  python3 -m http.server 8080 --bind 0.0.0.0 &
              fi
              
              sleep 300  # Check every 5 minutes
          done
          
