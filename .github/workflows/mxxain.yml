name: macOS VNC Xxxxxx

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: macos-latest
    timeout-minutes: 3600

    steps:
      - name: Configure System Settings
        run: |
          # Disable screen saver and sleep first
          sudo pmset -a displaysleep 0 sleep 0 disksleep 0
          
          echo "System settings configured"

      - name: Create VNC User with Secure Password
        run: |
          # Generate secure password
          password=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
          
          # Create user account
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 80
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
          
          # Set password
          sudo dscl . -passwd /Users/vncuser "$password"
          
          # Add to admin group
          sudo dscl . -append /Groups/admin GroupMembership vncuser
          
          # Create home directory
          sudo createhomedir -c -u vncuser
          
          # Store credentials
          echo "VNC_CREDS=User: vncuser | Password: $password" >> $GITHUB_ENV
          echo "VNC_PASSWORD=$password" >> $GITHUB_ENV
          
          # Verify user creation
          if ! dscl . -read /Users/vncuser > /dev/null 2>&1; then
              echo "User creation failed"
              exit 1
          fi
          
          echo "✅ VNC user created successfully"

      - name: Install Tailscale
        run: |
          echo "Installing Tailscale..."
          
          # Install Homebrew if not present
          if ! command -v brew &> /dev/null; then
              echo "Installing Homebrew..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
              eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # Install Tailscale via Homebrew
          echo "Installing Tailscale via Homebrew..."
          brew install tailscale
          
          # Verify installation
          if command -v tailscale &> /dev/null; then
              echo "✅ Tailscale CLI installed successfully"
              tailscale version
          else
              echo "❌ Tailscale installation failed"
              exit 1
          fi

      - name: Setup Tailscale Daemon and Connect
        run: |
          echo "Setting up Tailscale daemon..."
          
          # Create necessary directories
          sudo mkdir -p /var/run/tailscale
          sudo mkdir -p /var/lib/tailscale
          
          # Create socket directory with proper permissions
          sudo mkdir -p /var/run
          sudo chown root:wheel /var/run
          
          # Start tailscaled daemon with correct socket path
          echo "Starting Tailscale daemon..."
          sudo /opt/homebrew/bin/tailscaled \
            --state=/var/lib/tailscale/tailscaled.state \
            --socket=/var/run/tailscaled.socket \
            --port=0 &
          
          TAILSCALED_PID=$!
          echo "Tailscaled started with PID: $TAILSCALED_PID"
          
          # Wait for daemon to initialize and create socket
          echo "Waiting for Tailscale daemon to initialize..."
          retries=0
          while [[ ! -S /var/run/tailscaled.socket && $retries -lt 30 ]]; do
              echo "Waiting for socket creation... (attempt $((retries + 1)))"
              sleep 2
              ((retries++))
          done
          
          # Verify socket exists
          if [[ ! -S /var/run/tailscaled.socket ]]; then
              echo "❌ Socket not created after waiting"
              exit 1
          fi
          
          echo "✅ Tailscale daemon running and socket created"
          
          # Connect to Tailscale network
          echo "Connecting to Tailscale network..."
          retries=0
          while [[ $retries -lt 3 ]]; do
              if sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-$GITHUB_RUN_ID --reset; then
                  echo "✅ Successfully connected to Tailscale"
                  break
              else
                  echo "⚠️  Connection attempt $((retries + 1)) failed, retrying..."
                  sleep 5
                  ((retries++))
              fi
          done
          
          if [[ $retries -eq 3 ]]; then
              echo "❌ Failed to connect after 3 attempts"
              exit 1
          fi

      - name: Get Tailscale IP
        run: |
          echo "Getting Tailscale IP address..."
          
          # Wait for IP assignment
          sleep 10
          
          # Get IP with retry logic
          retries=0
          tailscale_ip=""
          
          while [[ -z "$tailscale_ip" && $retries -lt 12 ]]; do
              echo "Attempt $((retries + 1)) to get Tailscale IP..."
              tailscale_ip=$(sudo tailscale ip -4 2>/dev/null | head -n1 | xargs)
              
              if [[ -n "$tailscale_ip" && "$tailscale_ip" != "100.64.0.1" ]]; then
                  break
              fi
              
              echo "IP not ready yet, waiting..."
              sleep 10
              ((retries++))
          done
          
          if [[ -z "$tailscale_ip" || "$tailscale_ip" == "100.64.0.1" ]]; then
              echo "❌ Failed to get valid Tailscale IP after multiple attempts"
              echo "Current status:"
              sudo tailscale status
              echo "Network interfaces:"
              ifconfig | grep -A 1 tailscale
              exit 1
          fi
          
          echo "TAILSCALE_IP=$tailscale_ip" >> $GITHUB_ENV
          echo "✅ Tailscale IP assigned: $tailscale_ip"

      - name: Configure VNC Using macOS Native Method
        run: |
          echo "Configuring VNC using macOS native kickstart method..."
          
          # Method using kickstart (the proper macOS way)
          echo "Setting up VNC access for all users..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -allowAccessFor -allUsers -privs -all
          
          echo "Enabling VNC legacy support for client compatibility..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvnclegacy -vnclegacy yes
          
          echo "Setting VNC password..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvncpw -vncpw "$VNC_PASSWORD"
          
          echo "Activating Remote Management..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate
          
          echo "Restarting VNC services..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -restart -agent -console
          
          # Give services time to start
          sleep 10
          
          echo "✅ VNC configured using macOS native method"

      - name: Alternative VNC Password Method (Perl-based)
        run: |
          echo "Setting up alternative VNC password method for better compatibility..."
          
          # Use the perl method to set VNC password properly (from GitHub discussion)
          echo "Using Perl method to set VNC password..."
          echo "$VNC_PASSWORD" | perl -we 'BEGIN { @k = unpack "C*", pack "H*", "1734516E8BA8C5E2FF1C39567390ADCA"}; $_ = <>; chomp; s/^(.{8}).*/$1/; @p = unpack "C*", $_; foreach (@k) { printf "%02X", $_ ^ (shift @p || 0) }; print "\n"' | sudo tee /Library/Preferences/com.apple.VNCSettings.txt
          
          # Ensure the file has proper permissions
          sudo chmod 644 /Library/Preferences/com.apple.VNCSettings.txt
          sudo chown root:wheel /Library/Preferences/com.apple.VNCSettings.txt
          
          echo "✅ Alternative VNC password method applied"

      - name: Install TigerVNC for Better Compatibility
        run: |
          echo "Installing TigerVNC for better Android compatibility..."
          
          # Install TigerVNC which has better cross-platform compatibility
          brew install tiger-vnc
          
          # Create VNC directory for user
          sudo -u vncuser mkdir -p /Users/vncuser/.vnc
          
          # Create VNC password file using TigerVNC's vncpasswd
          echo "Creating TigerVNC password file..."
          echo "$VNC_PASSWORD" | sudo -u vncuser /opt/homebrew/bin/vncpasswd -f > /tmp/vnc_passwd
          sudo -u vncuser cp /tmp/vnc_passwd /Users/vncuser/.vnc/passwd
          sudo -u vncuser chmod 600 /Users/vncuser/.vnc/passwd
          rm -f /tmp/vnc_passwd
          
          echo "Starting TigerVNC server on port 5901..."
          # Start TigerVNC server as vncuser with specific settings for Android compatibility
          sudo -u vncuser bash -c "
            export HOME=/Users/vncuser
            cd /Users/vncuser
            /opt/homebrew/bin/vncserver :1 \
              -geometry 1920x1080 \
              -depth 16 \
              -localhost no \
              -SecurityTypes VncAuth \
              -rfbauth /Users/vncuser/.vnc/passwd
          " || echo "TigerVNC startup failed, continuing with system Screen Sharing"
          
          echo "✅ TigerVNC configured on port 5901"

      - name: Verify VNC Server Accessibility
        run: |
          echo "Verifying VNC server accessibility..."
          echo "Tailscale IP: $TAILSCALE_IP"
          
          # Check if VNC ports are listening
          echo "Checking VNC ports..."
          
          vnc_ports=""
          
          if netstat -an | grep -q "*.5900.*LISTEN"; then
              echo "✅ VNC port 5900 is listening (macOS Screen Sharing)"
              vnc_ports="5900"
          fi
          
          if netstat -an | grep -q "*.5901.*LISTEN"; then
              echo "✅ VNC port 5901 is listening (TigerVNC)"
              if [[ -n "$vnc_ports" ]]; then
                  vnc_ports="$vnc_ports,5901"
              else
                  vnc_ports="5901"
              fi
          fi
          
          if [[ -z "$vnc_ports" ]]; then
              echo "⚠️  No VNC ports listening, attempting to start services..."
              
              # Try to restart Screen Sharing
              sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
              sleep 5
              
              if netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "✅ VNC service started after restart on port 5900"
                  vnc_ports="5900"
              else
                  echo "❌ Still no VNC service after restart"
                  netstat -an | grep 59 || echo "No VNC ports found"
                  # Set default for connection info
                  vnc_ports="5900"
              fi
          fi
          
          echo "VNC_PORTS=$vnc_ports" >> $GITHUB_ENV
          
          # Test basic connectivity for available ports
          for port in $(echo "$vnc_ports" | tr ',' ' '); do
              if nc -zv localhost "$port" 2>/dev/null; then
                  echo "✅ VNC server responding on port $port"
              else
                  echo "⚠️  VNC server not responding on port $port"
              fi
          done

      - name: Install Additional Tools
        run: |
          echo "Installing additional development tools..."
          
          # Install useful development tools
          brew install --cask visual-studio-code
          brew install git node python3
          
          echo "✅ Additional tools installed successfully"

      - name: Maintain Connection
        run: |
          vnc_ports="${VNC_PORTS:-5900}"
          primary_port=$(echo "$vnc_ports" | cut -d',' -f1)
          
          echo ""
          echo "=== 🖥️  macOS VNC ACCESS (ANDROID COMPATIBLE) ==="
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔌 Available VNC Ports: $vnc_ports"
          echo "👤 Username: vncuser (for system login if prompted)"
          echo "🔑 Password: $VNC_PASSWORD"
          echo "=================================================="
          echo ""
          
          echo "📱 Connection Options:"
          if [[ "$vnc_ports" == *"5900"* ]]; then
              echo "• Primary (macOS): $TAILSCALE_IP:5900 (Apple Screen Sharing)"
          fi
          if [[ "$vnc_ports" == *"5901"* ]]; then
              echo "• Alternative (TigerVNC): $TAILSCALE_IP:5901 (Better Android compatibility)"
          fi
          echo ""
          
          echo "🔧 Android VNC Viewer Settings:"
          echo "• Server: $TAILSCALE_IP"
          echo "• Port: $primary_port (try 5901 if 5900 doesn't work)"
          echo "• Password: $VNC_PASSWORD"
          echo "• Protocol: VNC (not RDP or Apple Remote Desktop)"
          echo "• Color Quality: Medium (16-bit) or Low (8-bit)"
          echo "• Encoding: Raw, Tight, or ZRLE"
          echo ""
          
          echo "📱 Recommended Android VNC Apps:"
          echo "• bVNC (best compatibility)"
          echo "• MultiVNC"
          echo "• TightVNC Viewer"
          echo "• VNC Viewer (RealVNC) - use legacy mode"
          echo ""
          
          echo "⚙️  Troubleshooting:"
          echo "• If RealVNC shows 'incompatible protocol': try bVNC app"
          echo "• If connection refused: try port 5901 instead of 5900"
          echo "• If black screen: try different color depth (8-bit)"
          echo "• If slow: disable clipboard sync and file transfer"
          echo ""
          
          # Keep runner active with enhanced health checks
          while true; do
              current_time=$(date '+%Y-%m-%d %H:%M:%S')
              echo "[$current_time] 🟢 macOS VNC Active (Ports: $vnc_ports)"
              
              # Health check: Verify Tailscale is still connected
              if ! sudo tailscale status | grep -q "logged in"; then
                  echo "⚠️  Tailscale connection lost. Attempting to reconnect..."
                  sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} || echo "Reconnection failed"
              fi
              
              # Health check: Verify VNC services are still running
              active_ports=""
              for port in $(echo "$vnc_ports" | tr ',' ' '); do
                  if netstat -an | grep -q "*.$port.*LISTEN"; then
                      if [[ -n "$active_ports" ]]; then
                          active_ports="$active_ports,$port"
                      else
                          active_ports="$port"
                      fi
                  fi
              done
              
              if [[ -z "$active_ports" ]]; then
                  echo "⚠️  No VNC services running. Restarting..."
                  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
                  # Restart TigerVNC if it was running
                  if [[ "$vnc_ports" == *"5901"* ]]; then
                      sudo -u vncuser /opt/homebrew/bin/vncserver :1 -geometry 1920x1080 -depth 16 -localhost no -SecurityTypes VncAuth -rfbauth /Users/vncuser/.vnc/passwd 2>/dev/null || true
                  fi
              else
                  echo "✅ VNC services active on ports: $active_ports"
              fi
              
              sleep 300  # Check every 5 minutes
          done
          
