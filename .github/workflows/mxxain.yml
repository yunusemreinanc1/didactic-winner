name: macOS VNC Xxxxxx

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: macos-latest
    timeout-minutes: 3600

    steps:
      - name: Configure System Settings
        run: |
          # Disable screen saver and sleep first
          sudo pmset -a displaysleep 0 sleep 0 disksleep 0
          echo "✅ System settings configured"

      - name: Create VNC User with Secure Password
        run: |
          # Generate secure password
          password=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
          
          # Create user account
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 80
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
          
          # Set password
          sudo dscl . -passwd /Users/vncuser "$password"
          
          # Add to admin group
          sudo dscl . -append /Groups/admin GroupMembership vncuser
          
          # Create home directory
          sudo createhomedir -c -u vncuser
          
          # Store credentials
          echo "VNC_CREDS=User: vncuser | Password: $password" >> $GITHUB_ENV
          echo "VNC_PASSWORD=$password" >> $GITHUB_ENV
          echo "VNC_USERNAME=vncuser" >> $GITHUB_ENV
          
          # Verify user creation
          if ! dscl . -read /Users/vncuser > /dev/null 2>&1; then
              echo "User creation failed"
              exit 1
          fi
          
          echo "✅ VNC user 'vncuser' created with password: $password"

      - name: Install Tailscale
        run: |
          echo "Installing Tailscale..."
          
          # Install Homebrew if not present
          if ! command -v brew &> /dev/null; then
              echo "Installing Homebrew..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
              eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # Install Tailscale via Homebrew
          echo "Installing Tailscale via Homebrew..."
          brew install tailscale
          
          # Verify installation
          if command -v tailscale &> /dev/null; then
              echo "✅ Tailscale CLI installed successfully"
              tailscale version
          else
              echo "❌ Tailscale installation failed"
              exit 1
          fi

      - name: Setup Tailscale Daemon and Connect
        run: |
          echo "Setting up Tailscale daemon..."
          
          # Create necessary directories
          sudo mkdir -p /var/run/tailscale
          sudo mkdir -p /var/lib/tailscale
          
          # Create socket directory with proper permissions
          sudo mkdir -p /var/run
          sudo chown root:wheel /var/run
          
          # Start tailscaled daemon with correct socket path
          echo "Starting Tailscale daemon..."
          sudo /opt/homebrew/bin/tailscaled \
            --state=/var/lib/tailscale/tailscaled.state \
            --socket=/var/run/tailscaled.socket \
            --port=0 &
          
          TAILSCALED_PID=$!
          echo "Tailscaled started with PID: $TAILSCALED_PID"
          
          # Wait for daemon to initialize and create socket
          echo "Waiting for Tailscale daemon to initialize..."
          retries=0
          while [[ ! -S /var/run/tailscaled.socket && $retries -lt 30 ]]; do
              echo "Waiting for socket creation... (attempt $((retries + 1)))"
              sleep 2
              ((retries++))
          done
          
          # Verify socket exists
          if [[ ! -S /var/run/tailscaled.socket ]]; then
              echo "❌ Socket not created after waiting"
              exit 1
          fi
          
          echo "✅ Tailscale daemon running and socket created"
          
          # Connect to Tailscale network
          echo "Connecting to Tailscale network..."
          retries=0
          while [[ $retries -lt 3 ]]; do
              if sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-$GITHUB_RUN_ID --reset; then
                  echo "✅ Successfully connected to Tailscale"
                  break
              else
                  echo "⚠️  Connection attempt $((retries + 1)) failed, retrying..."
                  sleep 5
                  ((retries++))
              fi
          done
          
          if [[ $retries -eq 3 ]]; then
              echo "❌ Failed to connect after 3 attempts"
              exit 1
          fi

      - name: Get Tailscale IP
        run: |
          echo "Getting Tailscale IP address..."
          
          # Wait for IP assignment
          sleep 10
          
          # Get IP with retry logic
          retries=0
          tailscale_ip=""
          
          while [[ -z "$tailscale_ip" && $retries -lt 12 ]]; do
              echo "Attempt $((retries + 1)) to get Tailscale IP..."
              tailscale_ip=$(sudo tailscale ip -4 2>/dev/null | head -n1 | xargs)
              
              if [[ -n "$tailscale_ip" && "$tailscale_ip" != "100.64.0.1" ]]; then
                  break
              fi
              
              echo "IP not ready yet, waiting..."
              sleep 10
              ((retries++))
          done
          
          if [[ -z "$tailscale_ip" || "$tailscale_ip" == "100.64.0.1" ]]; then
              echo "❌ Failed to get valid Tailscale IP after multiple attempts"
              echo "Current status:"
              sudo tailscale status
              echo "Network interfaces:"
              ifconfig | grep -A 1 tailscale
              exit 1
          fi
          
          echo "TAILSCALE_IP=$tailscale_ip" >> $GITHUB_ENV
          echo "✅ Tailscale IP assigned: $tailscale_ip"

      - name: Enable Screen Sharing with Username/Password Authentication
        run: |
          echo "Enabling macOS Screen Sharing with username/password authentication..."
          
          # Enable Screen Sharing without VNC password (use system accounts instead)
          echo "Configuring Screen Sharing for user authentication..."
          
          # Method 1: Enable via System Settings programmatically
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
          
          # Enable Screen Sharing service
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          
          # Configure to allow VNC clients with user authentication (not VNC password)
          echo "Setting up user-based authentication (no VNC password needed)..."
          
          # This enables the "Allow VNC users to connect with password" option
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -allowAccessFor -specifiedUsers
          
          # Add our VNC user to the access list
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -access -on -users vncuser -privs -all
          
          # Enable the service
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate
          
          # Wait for services to start
          sleep 10
          
          echo "✅ Screen Sharing enabled with username/password authentication"

      - name: Install noVNC Web Interface (Android-Friendly Alternative)
        run: |
          echo "Installing noVNC for web-based VNC access..."
          
          # Install noVNC and websockify
          pip3 install novnc
          
          # Install websockify separately if needed
          pip3 install websockify
          
          # Start noVNC proxy that connects to our VNC server
          echo "Starting noVNC web proxy..."
          novnc --listen 0.0.0.0:8080 --target 127.0.0.1:5900 &
          NOVNC_PID=$!
          echo "noVNC started with PID: $NOVNC_PID"
          
          # Wait for noVNC to start
          sleep 5
          
          echo "✅ noVNC web interface available on port 8080"

      - name: Verify VNC Server Accessibility
        run: |
          echo "Verifying VNC server accessibility..."
          echo "Tailscale IP: $TAILSCALE_IP"
          
          # Check if VNC port (5900) is listening
          if netstat -an | grep -q "*.5900.*LISTEN"; then
              echo "✅ VNC port 5900 is listening (macOS Screen Sharing)"
              
              # Test basic VNC connectivity
              if nc -zv localhost 5900 2>/dev/null; then
                  echo "✅ VNC server responding locally on port 5900"
              else
                  echo "⚠️  VNC server not responding on port 5900"
              fi
          else
              echo "⚠️  VNC port 5900 is not listening"
              echo "Attempting to restart Screen Sharing service..."
              
              sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
              sleep 2
              sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
              sleep 5
              
              if netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "✅ VNC service started after restart"
              else
                  echo "❌ Still no VNC service after restart"
                  netstat -an | grep 59 || echo "No VNC ports found"
              fi
          fi
          
          # Check if noVNC web interface is running
          if netstat -an | grep -q "*.8080.*LISTEN"; then
              echo "✅ noVNC web interface is running on port 8080"
          else
              echo "⚠️  noVNC web interface not running"
          fi

      - name: Install Additional Tools
        run: |
          echo "Installing additional development tools..."
          
          # Install useful development tools
          brew install --cask visual-studio-code
          brew install git node python3
          
          echo "✅ Additional tools installed successfully"

      - name: Maintain Connection
        run: |
          echo ""
          echo "=== 🖥️  macOS VNC ACCESS (ANDROID COMPATIBLE) ==="
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔌 VNC Port: 5900"
          echo "👤 Username: $VNC_USERNAME"
          echo "🔑 Password: $VNC_PASSWORD"
          echo "=================================================="
          echo ""
          
          echo "📱 CONNECTION METHODS:"
          echo ""
          echo "🔗 Method 1: Direct VNC (Recommended for Android)"
          echo "• Server: $TAILSCALE_IP"
          echo "• Port: 5900"
          echo "• Authentication Type: Username & Password (NOT VNC Password)"
          echo "• Username: $VNC_USERNAME"
          echo "• Password: $VNC_PASSWORD"
          echo ""
          
          echo "🌐 Method 2: Web Browser (Works on any device)"
          echo "• URL: http://$TAILSCALE_IP:8080/vnc.html"
          echo "• No app needed - works in any browser!"
          echo "• Username: $VNC_USERNAME"
          echo "• Password: $VNC_PASSWORD"
          echo ""
          
          echo "📱 ANDROID VNC APPS (use Method 1 settings):"
          echo "• RealVNC Viewer - Select 'Username and Password' auth"
          echo "• bVNC - Best compatibility"
          echo "• MultiVNC"
          echo "• VNC Viewer (free)"
          echo ""
          
          echo "⚙️  ANDROID VNC SETTINGS:"
          echo "• Connection Type: VNC (not RDP)"
          echo "• Authentication: Username/Password (NOT VNC Password)"
          echo "• Color Quality: Medium (16-bit) or High (24-bit)"
          echo "• Disable: Clipboard sync, file transfer (for performance)"
          echo ""
          
          echo "🔧 TROUBLESHOOTING:"
          echo "• If 'incompatible protocol': Try the web browser method"
          echo "• If authentication fails: Make sure to select 'Username & Password' not 'VNC Password'"
          echo "• If connection refused: Check firewall or try web browser method"
          echo ""
          
          # Keep runner active with enhanced health checks
          while true; do
              current_time=$(date '+%Y-%m-%d %H:%M:%S')
              echo "[$current_time] 🟢 macOS VNC Active (Native + Web)"
              
              # Health check: Verify Tailscale is still connected
              if ! sudo tailscale status | grep -q "logged in"; then
                  echo "⚠️  Tailscale connection lost. Attempting to reconnect..."
                  sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} || echo "Reconnection failed"
              fi
              
              # Health check: Verify VNC service is still running
              if ! netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "⚠️  VNC service down. Restarting..."
                  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
              fi
              
              # Health check: Verify noVNC web interface is still running
              if ! netstat -an | grep -q "*.8080.*LISTEN"; then
                  echo "⚠️  noVNC web interface down. Restarting..."
                  pkill -f novnc || true
                  novnc --listen 0.0.0.0:8080 --target 127.0.0.1:5900 &
              fi
              
              sleep 300  # Check every 5 minutes
          done
