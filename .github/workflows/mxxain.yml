name: macOS VNC Xxxxxx

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: macos-latest
    timeout-minutes: 3600

    steps:
      - name: Configure System Settings
        run: |
          # Disable screen saver and sleep first
          sudo pmset -a displaysleep 0 sleep 0 disksleep 0
          
          echo "System settings configured"

      - name: Create VNC User with Secure Password
        run: |
          # Generate secure password
          password=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
          
          # Create user account
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 80
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
          
          # Set password
          sudo dscl . -passwd /Users/vncuser "$password"
          
          # Add to admin group
          sudo dscl . -append /Groups/admin GroupMembership vncuser
          
          # Create home directory
          sudo createhomedir -c -u vncuser
          
          # Store credentials
          echo "VNC_CREDS=User: vncuser | Password: $password" >> $GITHUB_ENV
          echo "VNC_PASSWORD=$password" >> $GITHUB_ENV
          
          # Verify user creation
          if ! dscl . -read /Users/vncuser > /dev/null 2>&1; then
              echo "User creation failed"
              exit 1
          fi
          
          echo "✅ VNC user created successfully"

      - name: Install Tailscale
        run: |
          echo "Installing Tailscale..."
          
          # Install Homebrew if not present
          if ! command -v brew &> /dev/null; then
              echo "Installing Homebrew..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
              eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # Install Tailscale via Homebrew
          echo "Installing Tailscale via Homebrew..."
          brew install tailscale
          
          # Verify installation
          if command -v tailscale &> /dev/null; then
              echo "✅ Tailscale CLI installed successfully"
              tailscale version
          else
              echo "❌ Tailscale installation failed"
              exit 1
          fi

      - name: Setup Tailscale Daemon and Connect
        run: |
          echo "Setting up Tailscale daemon..."
          
          # Create necessary directories
          sudo mkdir -p /var/run/tailscale
          sudo mkdir -p /var/lib/tailscale
          
          # Create socket directory with proper permissions
          sudo mkdir -p /var/run
          sudo chown root:wheel /var/run
          
          # Start tailscaled daemon with correct socket path
          echo "Starting Tailscale daemon..."
          sudo /opt/homebrew/bin/tailscaled \
            --state=/var/lib/tailscale/tailscaled.state \
            --socket=/var/run/tailscaled.socket \
            --port=0 &
          
          TAILSCALED_PID=$!
          echo "Tailscaled started with PID: $TAILSCALED_PID"
          
          # Wait for daemon to initialize and create socket
          echo "Waiting for Tailscale daemon to initialize..."
          retries=0
          while [[ ! -S /var/run/tailscaled.socket && $retries -lt 30 ]]; do
              echo "Waiting for socket creation... (attempt $((retries + 1)))"
              sleep 2
              ((retries++))
          done
          
          # Verify socket exists
          if [[ ! -S /var/run/tailscaled.socket ]]; then
              echo "❌ Socket not created after waiting"
              exit 1
          fi
          
          echo "✅ Tailscale daemon running and socket created"
          
          # Connect to Tailscale network
          echo "Connecting to Tailscale network..."
          retries=0
          while [[ $retries -lt 3 ]]; do
              if sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-$GITHUB_RUN_ID --reset; then
                  echo "✅ Successfully connected to Tailscale"
                  break
              else
                  echo "⚠️  Connection attempt $((retries + 1)) failed, retrying..."
                  sleep 5
                  ((retries++))
              fi
          done
          
          if [[ $retries -eq 3 ]]; then
              echo "❌ Failed to connect after 3 attempts"
              exit 1
          fi

      - name: Get Tailscale IP
        run: |
          echo "Getting Tailscale IP address..."
          
          # Wait for IP assignment
          sleep 10
          
          # Get IP with retry logic
          retries=0
          tailscale_ip=""
          
          while [[ -z "$tailscale_ip" && $retries -lt 12 ]]; do
              echo "Attempt $((retries + 1)) to get Tailscale IP..."
              tailscale_ip=$(sudo tailscale ip -4 2>/dev/null | head -n1 | xargs)
              
              if [[ -n "$tailscale_ip" && "$tailscale_ip" != "100.64.0.1" ]]; then
                  break
              fi
              
              echo "IP not ready yet, waiting..."
              sleep 10
              ((retries++))
          done
          
          if [[ -z "$tailscale_ip" || "$tailscale_ip" == "100.64.0.1" ]]; then
              echo "❌ Failed to get valid Tailscale IP after multiple attempts"
              echo "Current status:"
              sudo tailscale status
              echo "Network interfaces:"
              ifconfig | grep -A 1 tailscale
              exit 1
          fi
          
          echo "TAILSCALE_IP=$tailscale_ip" >> $GITHUB_ENV
          echo "✅ Tailscale IP assigned: $tailscale_ip"

      - name: Disable Conflicting Services and Enable Pure Screen Sharing
        run: |
          echo "Disabling Remote Management and enabling pure Screen Sharing..."
          
          # First, completely deactivate any existing Remote Management
          echo "Deactivating Remote Management..."
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop || true
          
          # Stop any running ARD processes
          sudo pkill -f ARDAgent || true
          
          # Wait for processes to stop
          sleep 5
          
          # Enable Screen Sharing through system preferences method (more compatible)
          echo "Enabling Screen Sharing through system method..."
          
          # Method 1: Enable via launchctl (most compatible with different macOS versions)
          sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          
          # Wait for service to start
          sleep 10
          
          echo "✅ Screen Sharing enabled via system method"

      - name: Configure VNC Authentication
        run: |
          echo "Configuring VNC authentication..."
          
          # Create VNC password file for authentication
          echo "$VNC_PASSWORD" | /usr/bin/vncpasswd -f > /tmp/vncpasswd
          sudo cp /tmp/vncpasswd /etc/vncpasswd
          sudo chmod 600 /etc/vncpasswd
          sudo chown root:wheel /etc/vncpasswd
          
          # Configure VNC server settings for better compatibility
          sudo defaults write /Library/Preferences/com.apple.VNCSettings.txt VNCLegacyConnectionsEnabled -bool true
          sudo defaults write /Library/Preferences/com.apple.VNCSettings.txt VNCStandardAuthenticationEnabled -bool true
          
          echo "✅ VNC authentication configured"

      - name: Install and Configure Alternative VNC Server
        run: |
          echo "Installing TigerVNC for better Android compatibility..."
          
          # Install TigerVNC which has better cross-platform compatibility
          brew install tiger-vnc
          
          # Configure and start TigerVNC server on a different port (5901)
          echo "Starting TigerVNC server..."
          
          # Create VNC startup script
          cat > /tmp/start_vnc.sh << 'EOF'
          #!/bin/bash
          export USER=vncuser
          export HOME=/Users/vncuser
          cd /Users/vncuser
          /opt/homebrew/bin/vncserver :1 -geometry 1920x1080 -depth 24 -passwd /tmp/vncpasswd
          EOF
          
          chmod +x /tmp/start_vnc.sh
          
          # Set VNC password for TigerVNC
          echo "$VNC_PASSWORD" | /opt/homebrew/bin/vncpasswd -f > /tmp/tigervnc_passwd
          
          # Start TigerVNC server as vncuser
          sudo -u vncuser bash -c "
            export HOME=/Users/vncuser
            cd /Users/vncuser
            echo '$VNC_PASSWORD' | /opt/homebrew/bin/vncpasswd -f > ~/.vnc/passwd 2>/dev/null || mkdir -p ~/.vnc && echo '$VNC_PASSWORD' | /opt/homebrew/bin/vncpasswd -f > ~/.vnc/passwd
            chmod 600 ~/.vnc/passwd
            /opt/homebrew/bin/vncserver :1 -geometry 1920x1080 -depth 16 -localhost no
          " || echo "TigerVNC startup failed, continuing with system Screen Sharing"
          
          echo "✅ Alternative VNC server configured"

      - name: Verify VNC Server Accessibility
        run: |
          echo "Verifying VNC server accessibility..."
          echo "Tailscale IP: $TAILSCALE_IP"
          
          # Check if VNC ports are listening
          echo "Checking VNC ports..."
          
          if netstat -an | grep -q "*.5900.*LISTEN"; then
              echo "✅ VNC port 5900 is listening (macOS Screen Sharing)"
              vnc_port="5900"
          elif netstat -an | grep -q "*.5901.*LISTEN"; then
              echo "✅ VNC port 5901 is listening (TigerVNC)"
              vnc_port="5901"
              echo "VNC_PORT=5901" >> $GITHUB_ENV
          else
              echo "⚠️  No VNC ports listening, attempting to restart services..."
              
              # Try to restart Screen Sharing
              sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist 2>/dev/null || true
              sleep 2
              sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
              sleep 5
              
              if netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "✅ VNC service started after restart on port 5900"
                  vnc_port="5900"
              else
                  echo "❌ Still no VNC service after restart"
                  netstat -an | grep 59 || echo "No VNC ports found"
                  # Continue anyway, might work
                  vnc_port="5900"
              fi
          fi
          
          echo "VNC_PORT=${vnc_port:-5900}" >> $GITHUB_ENV
          
          # Test basic connectivity
          nc -zv localhost ${vnc_port:-5900} && echo "✅ VNC server responding locally" || echo "⚠️  VNC server not responding locally"

      - name: Install Additional Tools
        run: |
          echo "Installing additional development tools..."
          
          # Install useful development tools
          brew install --cask visual-studio-code
          brew install git node python3
          
          echo "✅ Additional tools installed successfully"

      - name: Maintain Connection
        run: |
          vnc_port="${VNC_PORT:-5900}"
          echo ""
          echo "=== 🖥️  macOS VNC ACCESS (ANDROID COMPATIBLE) ==="
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "🔌 VNC Port: $vnc_port"
          echo "👤 Username: vncuser (for system login if prompted)"
          echo "🔑 Password: $VNC_PASSWORD"
          echo "🔗 VNC URL: $TAILSCALE_IP:$vnc_port"
          echo "=================================================="
          echo ""
          
          echo "📱 Android VNC Viewer Settings:"
          echo "• Server: $TAILSCALE_IP"
          echo "• Port: $vnc_port"
          echo "• Password: $VNC_PASSWORD"
          echo "• Protocol: VNC (not RDP)"
          echo "• Color Quality: Medium (16-bit) or Low (8-bit)"
          echo "• Advanced → Protocol Version: 3.3 or 3.7"
          echo ""
          
          echo "🔧 If still incompatible, try these Android VNC apps:"
          echo "• VNC Viewer (RealVNC) - Set compatibility mode"
          echo "• bVNC (best for compatibility)"
          echo "• MultiVNC"
          echo "• TightVNC Viewer"
          echo ""
          
          echo "⚙️  In VNC client settings:"
          echo "• Disable: Clipboard, Audio, File Transfer"
          echo "• Enable: View-only mode first, then enable control"
          echo "• Encoding: Raw or Tight (not ZRLE)"
          echo ""
          
          # Keep runner active with enhanced health checks
          while true; do
              current_time=$(date '+%Y-%m-%d %H:%M:%S')
              echo "[$current_time] 🟢 macOS VNC Active (Port: $vnc_port)"
              
              # Health check: Verify Tailscale is still connected
              if ! sudo tailscale status | grep -q "logged in"; then
                  echo "⚠️  Tailscale connection lost. Attempting to reconnect..."
                  sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} || echo "Reconnection failed"
              fi
              
              # Health check: Verify VNC is still running
              if ! netstat -an | grep -q "*.$vnc_port.*LISTEN"; then
                  echo "⚠️  VNC service down on port $vnc_port. Restarting..."
                  sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
                  # Also try to restart TigerVNC if it was running on 5901
                  if [[ "$vnc_port" == "5901" ]]; then
                      sudo -u vncuser /opt/homebrew/bin/vncserver :1 -geometry 1920x1080 -depth 16 -localhost no 2>/dev/null || true
                  fi
              fi
              
              sleep 300  # Check every 5 minutes
          done
          
