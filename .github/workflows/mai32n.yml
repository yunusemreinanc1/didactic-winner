name: macOS VNC v1

on:
  workflow_dispatch:

jobs:
  secure-vnc:
    runs-on: macos-latest
    timeout-minutes: 3600

    steps:
      - name: Configure VNC Settings
        run: |
          # Enable VNC (Screen Sharing) 
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -activate -configure -access -on -clientopts -setvnclegacy -vnclegacy yes \
            -clientopts -setvncpw -vncpw temp123 -restart -agent -privs -all
          
          # Enable VNC access for all users
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -allowAccessFor -allUsers -privs -all
          
          # Start the VNC server
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist

      - name: Create VNC User with Secure Password
        run: |
          # Generate secure password
          password=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
          
          # Create user account
          sudo dscl . -create /Users/vncuser
          sudo dscl . -create /Users/vncuser UserShell /bin/bash
          sudo dscl . -create /Users/vncuser RealName "VNC User"
          sudo dscl . -create /Users/vncuser UniqueID 1001
          sudo dscl . -create /Users/vncuser PrimaryGroupID 80
          sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
          
          # Set password
          sudo dscl . -passwd /Users/vncuser "$password"
          
          # Add to admin group
          sudo dscl . -append /Groups/admin GroupMembership vncuser
          
          # Create home directory
          sudo createhomedir -c -u vncuser
          
          # Store credentials
          echo "VNC_CREDS=User: vncuser | Password: $password" >> $GITHUB_ENV
          echo "VNC_PASSWORD=$password" >> $GITHUB_ENV
          
          # Verify user creation
          if ! dscl . -read /Users/vncuser > /dev/null 2>&1; then
              echo "User creation failed"
              exit 1
          fi

      - name: Install Tailscale (Multiple Methods)
        run: |
          echo "Attempting to install Tailscale using multiple methods..."
          
          # Method 1: Try specific version PKG
          method1_success=false
          echo "Method 1: Trying specific version PKG..."
          if curl -L -o /tmp/tailscale.pkg "https://pkgs.tailscale.com/stable/Tailscale-1.86.4-macos.pkg"; then
              if [ -f /tmp/tailscale.pkg ] && [ -s /tmp/tailscale.pkg ]; then
                  file_size=$(wc -c < /tmp/tailscale.pkg)
                  if [ "$file_size" -gt 1000 ]; then
                      if sudo installer -pkg /tmp/tailscale.pkg -target /; then
                          echo "Method 1 successful"
                          method1_success=true
                          rm -f /tmp/tailscale.pkg
                      fi
                  fi
              fi
          fi
          
          # Method 2: Homebrew as fallback
          if [ "$method1_success" = false ]; then
              echo "Method 2: Using Homebrew..."
              # Install Homebrew if not present
              if ! command -v brew &> /dev/null; then
                  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                  echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
                  eval "$(/opt/homebrew/bin/brew shellenv)"
              fi
              
              # Install Tailscale via Homebrew
              brew install --cask tailscale
              
              # Start Tailscale daemon
              brew services start tailscale
              sleep 5
          fi
          
          # Method 3: Direct download from tailscale.com as last resort  
          if [ "$method1_success" = false ] && ! command -v tailscale &> /dev/null && [ ! -f "/Applications/Tailscale.app/Contents/MacOS/Tailscale" ]; then
              echo "Method 3: Direct download from tailscale.com..."
              if curl -L -o /tmp/tailscale-direct.pkg "https://tailscale.com/download/mac-direct"; then
                  if [ -f /tmp/tailscale-direct.pkg ] && [ -s /tmp/tailscale-direct.pkg ]; then
                      file_size=$(wc -c < /tmp/tailscale-direct.pkg)
                      if [ "$file_size" -gt 1000 ]; then
                          sudo installer -pkg /tmp/tailscale-direct.pkg -target /
                          rm -f /tmp/tailscale-direct.pkg
                      fi
                  fi
              fi
          fi
          
          # Verify installation
          sleep 5
          if [ -f "/Applications/Tailscale.app/Contents/MacOS/Tailscale" ]; then
              echo "Tailscale GUI app installed successfully"
              echo "TAILSCALE_PATH=/Applications/Tailscale.app/Contents/MacOS/Tailscale" >> $GITHUB_ENV
          elif command -v tailscale &> /dev/null; then
              echo "Tailscale CLI installed successfully"
              echo "TAILSCALE_PATH=tailscale" >> $GITHUB_ENV
          else
              echo "Tailscale installation failed with all methods"
              exit 1
          fi

      - name: Establish Tailscale Connection
        run: |
          # Start Tailscale with auth key
          if [ "$TAILSCALE_PATH" = "tailscale" ]; then
              # Homebrew installation - start service first
              sudo brew services start tailscale
              sleep 10
              sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-$GITHUB_RUN_ID
          else
              # GUI app installation
              sudo "$TAILSCALE_PATH" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-macos-$GITHUB_RUN_ID
          fi
          
          # Wait for Tailscale to assign an IP
          sleep 15
          
          tailscale_ip=""
          retries=0
          while [[ -z "$tailscale_ip" && $retries -lt 15 ]]; do
              if [ "$TAILSCALE_PATH" = "tailscale" ]; then
                  tailscale_ip=$(sudo tailscale ip -4 2>/dev/null | head -n1)
              else
                  tailscale_ip=$("$TAILSCALE_PATH" ip -4 2>/dev/null | head -n1)
              fi
              
              if [[ -n "$tailscale_ip" ]]; then
                  break
              fi
              echo "Waiting for Tailscale IP... (attempt $((retries + 1)))"
              sleep 10
              ((retries++))
          done
          
          if [[ -z "$tailscale_ip" ]]; then
              echo "Tailscale IP not assigned after multiple attempts. Checking status..."
              if [ "$TAILSCALE_PATH" = "tailscale" ]; then
                  sudo tailscale status
              else
                  "$TAILSCALE_PATH" status
              fi
              exit 1
          fi
          
          echo "TAILSCALE_IP=$tailscale_ip" >> $GITHUB_ENV
          echo "Tailscale IP assigned: $tailscale_ip"

      - name: Configure VNC with Password
        run: |
          # Set VNC password using the generated password
          echo "$VNC_PASSWORD" | sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart \
            -configure -clientopts -setvncpw -vncpw - -restart -agent
          
          # Disable screen saver and sleep
          sudo pmset -a displaysleep 0 sleep 0 disksleep 0
          
          # Ensure Screen Sharing is enabled and running
          sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
          
          # Give it time to start
          sleep 5

      - name: Verify VNC Accessibility
        run: |
          echo "Tailscale IP: $TAILSCALE_IP"
          
          # Check if VNC port (5900) is listening
          if ! netstat -an | grep -q "*.5900.*LISTEN"; then
              echo "VNC port 5900 is not listening. Checking processes..."
              ps aux | grep -i screen
              echo "Attempting to restart Screen Sharing..."
              sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist
              sleep 2
              sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
              sleep 5
              if ! netstat -an | grep -q "*.5900.*LISTEN"; then
                  echo "VNC still not accessible after restart"
                  netstat -an | grep 5900 || echo "No port 5900 found"
                  exit 1
              fi
          fi
          
          echo "VNC service is running and accessible!"

      - name: Install Additional Tools (Optional)
        run: |
          # Install Homebrew if not already present
          if ! command -v brew &> /dev/null; then
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
              echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
              eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # Install useful development tools
          brew install --cask visual-studio-code
          brew install git node python3
          
          echo "Additional tools installed successfully"

      - name: Maintain Connection
        run: |
          echo ""
          echo "=== macOS VNC ACCESS ==="
          echo "Tailscale IP: $TAILSCALE_IP"
          echo "VNC Port: 5900"
          echo "Username: vncuser"
          echo "Password: $VNC_PASSWORD"
          echo "VNC URL: vnc://$TAILSCALE_IP:5900"
          echo "======================="
          echo ""
          
          echo "Connect using:"
          echo "• macOS: Open Finder → Go → Connect to Server → vnc://$TAILSCALE_IP"
          echo "• Windows: Use VNC Viewer or TightVNC"
          echo "• Linux: Use Remmina or VNC Viewer"
          echo ""
          
          # Keep runner active
          while true; do
              echo "[$(date)] macOS VNC Active - Use Ctrl+C in workflow to terminate"
              
              # Verify Tailscale is still connected
              if [ "$TAILSCALE_PATH" = "tailscale" ]; then
                  if ! sudo tailscale status | grep -q "Logged in"; then
                      echo "Tailscale connection lost. Attempting to reconnect..."
                      sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }}
                  fi
              else
                  if ! "$TAILSCALE_PATH" status | grep -q "logged in"; then
                      echo "Tailscale connection lost. Attempting to reconnect..."
                      sudo "$TAILSCALE_PATH" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }}
                  fi
              fi
              
              sleep 300
          done
